<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="AmazonLambdaExtension.Generator.Models" #>
#pragma warning disable CS8669
namespace <#= handler.Namespace #>
{
    public sealed class <#= handler.WrapperClass #>
    {
<# if (function.ServiceResolver != null) { #>
        private readonly <#= function.ServiceResolver.FullName #> serviceResolver;

<# } #>
<# if (function.Filter != null) { #>
        private readonly <#= function.Filter.Type.FullName #> filter;

<# } #>
<# if (handler.IsSerializerRequired()) { #>
        private readonly AmazonLambdaExtension.Serialization.IBodySerializer serializer;

<# } #>
        private readonly <#= function.Function.FullName #> function;

        public <#= handler.WrapperClass #>()
        {
<# if (function.ServiceResolver != null) { #>
            serviceResolver = new <#= function.ServiceResolver.FullName #>();
<# } #>
<# if (function.Filter != null) { #>
            filter = new <#= function.Filter.Type.FullName #>();
<# } #>
<# if (handler.IsSerializerRequired()) { #>
<# if (function.ServiceResolver != null) { #>
            serializer = serviceResolver.GetService<AmazonLambdaExtension.Serialization.IBodySerializer>() ?? AmazonLambdaExtension.Serialization.JsonBodySerializer.Default;
<# } else { #>
            serializer = AmazonLambdaExtension.Serialization.JsonBodySerializer.Default;
<# } #>
<# } #>
<# if (function.ResolveFunction) { #>
            function = serviceResolver.GetService<<#= function.Function.FullName #>>();
<# } else { #>
            function = new <#= function.Function.FullName #>(<#= String.Join(",", function.ConstructorParameters.Select(static x => $"serviceResolver.GetService<{x.FullName}>()")) #>);
<# } #>
        }

<# if (handler.IsAsync || function.IsAsyncRequired()) { #>
        public async System.Threading.Tasks.Task<Amazon.Lambda.APIGatewayEvents.APIGatewayProxyResponse> Handle(Amazon.Lambda.APIGatewayEvents.APIGatewayProxyRequest request, Amazon.Lambda.Core.ILambdaContext context)
<# } else { #>
        public Amazon.Lambda.APIGatewayEvents.APIGatewayProxyResponse Handle(Amazon.Lambda.APIGatewayEvents.APIGatewayProxyRequest request, Amazon.Lambda.Core.ILambdaContext context)
<# } #>
        {
<# if (function.Filter?.Executing != null) { #>
<# if (function.Filter.Executing.HasResult) { #>
            var executingResult = <#= function.Filter.Executing.IsAsync ? "await " : "" #>filter.OnFunctionExecuting(request, context)<#= function.Filter.Executing.IsAsync ? ".ConfigureAwait(false)" : "" #>;
            if (executingResult != null)
            {
                return executingResult;
            }
<# } else { #>
            <#= function.Filter.Executing.IsAsync ? "await " : "" #>filter.OnFunctionExecuting(request, context)<#= function.Filter.Executing.IsAsync ? ".ConfigureAwait(false)" : "" #>;
<# } #>

<# } #>
            try
            {
<# for (var i = 0; i < handler.Parameters.Count; i++) { #>
<# var parameter = handler.Parameters[i]; #>
<# if (parameter.ParameterType == ParameterType.FromBody) { #>
                <#= parameter.Type.FullName #> p<#= i #>;
                try
                {
                    p<#= i #> = serializer.Deserialize<<#= parameter.Type.FullName #>>(request.Body);
                }
                catch (System.Exception ex)
                {
                    context.Logger.LogLine(ex.ToString());
                    return new Amazon.Lambda.APIGatewayEvents.APIGatewayProxyResponse { StatusCode = 400 };
                }
<# if (!parameter.SkipValidation) { #>

                if (!AmazonLambdaExtension.Helpers.ValidationHelper.Validate(p<#= i #>))
                {
                    return new Amazon.Lambda.APIGatewayEvents.APIGatewayProxyResponse { StatusCode = 400 };
                }
<# } #>
<# } else if (parameter.ParameterType == ParameterType.FromQuery) { #>
<# if (parameter.Type.IsArrayType) { #>
<# if (parameter.Type.ElementType.IsNullable) { #>
                if (!AmazonLambdaExtension.Helpers.BindHelper.TryBindNullableArray<<#= parameter.Type.ElementType.UnderlyingType.FullName #>>(request.MultiValueQueryStringParameters, "<#= parameter.Key #>", out var p<#= i #>))
                {
                    return new Amazon.Lambda.APIGatewayEvents.APIGatewayProxyResponse { StatusCode = 400 };
                }
<# } else { #>
                if (!AmazonLambdaExtension.Helpers.BindHelper.TryBindArray<<#= parameter.Type.ElementType.FullName #>>(request.MultiValueQueryStringParameters, "<#= parameter.Key #>", out var p<#= i #>))
                {
                    return new Amazon.Lambda.APIGatewayEvents.APIGatewayProxyResponse { StatusCode = 400 };
                }
<# } #>
<# } else { #>
<# if (parameter.Type.IsNullable) { #>
                if (!AmazonLambdaExtension.Helpers.BindHelper.TryBindNullable<<#= parameter.Type.UnderlyingType.FullName #>>(request.QueryStringParameters, "<#= parameter.Key #>", out var p<#= i #>))
                {
                    return new Amazon.Lambda.APIGatewayEvents.APIGatewayProxyResponse { StatusCode = 400 };
                }
<# } else { #>
                if (!AmazonLambdaExtension.Helpers.BindHelper.TryBind<<#= parameter.Type.FullName #>>(request.QueryStringParameters, "<#= parameter.Key #>", out var p<#= i #>))
                {
                    return new Amazon.Lambda.APIGatewayEvents.APIGatewayProxyResponse { StatusCode = 400 };
                }
<# } #>
<# } #>
<# } else if (parameter.ParameterType == ParameterType.FromRoute) { #>
<# if (parameter.Type.IsNullable) { #>
                if (!AmazonLambdaExtension.Helpers.BindHelper.TryBindNullable<<#= parameter.Type.UnderlyingType.FullName #>>(request.PathParameters, "<#= parameter.Key #>", out var p<#= i #>))
                {
                    return new Amazon.Lambda.APIGatewayEvents.APIGatewayProxyResponse { StatusCode = 400 };
                }
<# } else { #>
                if (!AmazonLambdaExtension.Helpers.BindHelper.TryBind<<#= parameter.Type.FullName #>>(request.PathParameters, "<#= parameter.Key #>", out var p<#= i #>))
                {
                    return new Amazon.Lambda.APIGatewayEvents.APIGatewayProxyResponse { StatusCode = 400 };
                }
<# } #>
<# } else if (parameter.ParameterType == ParameterType.FromHeader) { #>
<# if (parameter.Type.IsArrayType) { #>
<# if (parameter.Type.ElementType.IsNullable) { #>
                if (!AmazonLambdaExtension.Helpers.BindHelper.TryBindNullableArray<<#= parameter.Type.ElementType.UnderlyingType.FullName #>>(request.MultiValueHeaders, "<#= parameter.Key #>", out var p<#= i #>))
                {
                    return new Amazon.Lambda.APIGatewayEvents.APIGatewayProxyResponse { StatusCode = 400 };
                }
<# } else { #>
                if (!AmazonLambdaExtension.Helpers.BindHelper.TryBindArray<<#= parameter.Type.ElementType.FullName #>>(request.MultiValueHeaders, "<#= parameter.Key #>", out var p<#= i #>))
                {
                    return new Amazon.Lambda.APIGatewayEvents.APIGatewayProxyResponse { StatusCode = 400 };
                }
<# } #>
<# if (parameter.Type.IsNullable) { #>
                if (!AmazonLambdaExtension.Helpers.BindHelper.TryBindNullable<<#= parameter.Type.UnderlyingType.FullName #>>(request.Headers, "<#= parameter.Key #>", out var p<#= i #>))
                {
                    return new Amazon.Lambda.APIGatewayEvents.APIGatewayProxyResponse { StatusCode = 400 };
                }
<# } else { #>
                if (!AmazonLambdaExtension.Helpers.BindHelper.TryBind<<#= parameter.Type.FullName #>>(request.Headers, "<#= parameter.Key #>", out var p<#= i #>))
                {
                    return new Amazon.Lambda.APIGatewayEvents.APIGatewayProxyResponse { StatusCode = 400 };
                }
<# } #>
<# } #>
<# } else if (parameter.ParameterType == ParameterType.FromServices) { #>
                var p<#= i #> = serviceResolver.GetService<<#= parameter.Type.FullName #>>();
<# } else { #>
<# if (parameter.Type.IsAPIGatewayProxyRequest()) { #>
                var p<#= i #> = request;
<# } else if (parameter.Type.IsLambdaContext()) { #>
                var p<#= i #> = context;
<# } #>
<# } #>

<# } #>
                <#= handler.ResultType != null ? "var output = " : "" #><#= handler.IsAsync ? "await " : "" #>function.<#= handler.MethodName #>(<#= String.Join(", ", handler.Parameters.Select(static (x, i) => $"p{i}")) #>)<#= handler.IsAsync ? ".ConfigureAwait(false)" : "" #>;
<# if (handler.ResultType?.AllowNull ?? false) { #>
                if (output == null)
                {
                    return new Amazon.Lambda.APIGatewayEvents.APIGatewayProxyResponse { StatusCode = 404 };
                }
<# } #>

                return new Amazon.Lambda.APIGatewayEvents.APIGatewayProxyResponse
                {
<# if (handler.ResultType != null) { #>
                    Body = serializer.Serialize(output),
                    Headers = new Dictionary<string, string> { { "Content-Type", "application/json" } },
<# } #>
                    StatusCode = 200
                };
            }
            catch (AmazonLambdaExtension.ApiException ex)
            {
                return new Amazon.Lambda.APIGatewayEvents.APIGatewayProxyResponse { StatusCode = ex.StatusCode };
            }
            catch (System.Exception ex)
            {
                context.Logger.LogLine(ex.ToString());
                return new Amazon.Lambda.APIGatewayEvents.APIGatewayProxyResponse { StatusCode = 500 };
            }
<# if (function.Filter?.Executed != null) { #>
            finally
            {
                <#= function.Filter.Executed.IsAsync ? "await " : "" #>filter.OnFunctionExecuted(request, context)<#= function.Filter.Executed.IsAsync ? ".ConfigureAwait(false)" : "" #>;
            }
<# } #>
        }
    }
}
