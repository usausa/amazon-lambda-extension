<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="AmazonLambdaExtension.Helpers" #>
<#@ import namespace="AmazonLambdaExtension.SourceGenerator.Models" #>
namespace <#= handler.Namespace #>
{
    public sealed class <#= handler.WrapperClass #>
    {
<# if (function.ServiceLocator is not null) { #>
        private readonly <#= function.ServiceLocator.FullName #> serviceLocator;
<# } #>

<# if (handler.IsSerializerRequired()) { #>
        private readonly AmazonLambdaExtension.Serialization.IBodySerializer serializer;

<# } #>
        private readonly <#= function.Function.FullName #> function;

        public <#= handler.WrapperClass #>()
        {
<# if (function.ServiceLocator is not null) { #>
            serviceLocator = new <#= function.ServiceLocator.FullName #>();
<# } #>
<# if (handler.IsSerializerRequired()) { #>
<# if (function.ServiceLocator is not null) { #>
            serializer = serviceLocator.GetService<AmazonLambdaExtension.Serialization.IBodySerializer>() ?? AmazonLambdaExtension.Serialization.JsonBodySerializer.Default;
<# } else { #>
            serializer = AmazonLambdaExtension.Serialization.JsonBodySerializer.Default;
<# } #>
<# } #>
            function = new <#= function.Function.FullName #>(<#= String.Join(",", function.ConstructorParameters.Select(x => $"serviceLocator.GetService<{x.FullName}>()")) #>);
        }

<# if (handler.IsAsync) { #>
        public async System.Threding.Task<Amazon.Lambda.APIGatewayEvents.APIGatewayProxyResponse> Handle(Amazon.Lambda.APIGatewayEvents.APIGatewayProxyRequest request, Amazon.Lambda.Core.ILambdaContext context)
<# } else { #>
        public Amazon.Lambda.APIGatewayEvents.APIGatewayProxyResponse Handle(Amazon.Lambda.APIGatewayEvents.APIGatewayProxyRequest request, Amazon.Lambda.Core.ILambdaContext context)
<# } #>
        {
            if (request.Headers?.ContainsKey("X-Lambda-Ping") ?? false)
            {
                return new Amazon.Lambda.APIGatewayEvents.APIGatewayProxyResponse { StatusCode = 200 };
            }

            try
            {
<# for (var i = 0; i < handler.Parameters.Count; i++) { #>
<# var parameter = handler.Parameters[i]; #>
<# if (parameter.ParameterType == ParameterType.FromBody) { #>
                <#= parameter.Type.FullName #> p<#= i #>;
                try
                {
                    p<#= i #> = serializer.Deserialize<<#= parameter.Type.FullName #>>(request.Body);
                }
                catch (System.Exception ex)
                {
                    context.Logger.LogLine(ex.ToString());
                    return new Amazon.Lambda.APIGatewayEvents.APIGatewayProxyResponse { StatusCode = 400 };
                }

                if (!AmazonLambdaExtension.Helpers.ValidationHelper.Validate(p<#= i #>))
                {
                    return new Amazon.Lambda.APIGatewayEvents.APIGatewayProxyResponse { StatusCode = 400 };
                }
<# } else if (parameter.ParameterType == ParameterType.FromQuery) { #>
<# if (parameter.Type.IsArrayType) { #>
                if (!AmazonLambdaExtension.Helpers.BindHelper.TryBindArray<<#= parameter.Type.ElementType.FullName #>>(request.QueryStringParameters, "<#= parameter.Key #>", out var p<#= i #>))
                {
                    return new Amazon.Lambda.APIGatewayEvents.APIGatewayProxyResponse { StatusCode = 400 };
                }
<# } else { #>
                if (!AmazonLambdaExtension.Helpers.BindHelper.TryBind<<#= parameter.Type.FullName #>>(request.QueryStringParameters, "<#= parameter.Key #>", out var p<#= i #>))
                {
                    return new Amazon.Lambda.APIGatewayEvents.APIGatewayProxyResponse { StatusCode = 400 };
                }
<# } #>
<# } else if (parameter.ParameterType == ParameterType.FromRoute) { #>
                if (!AmazonLambdaExtension.Helpers.BindHelper.TryBind<<#= parameter.Type.FullName #>>(request.PathParameters, "<#= parameter.Key #>", out var p<#= i #>))
                {
                    return new Amazon.Lambda.APIGatewayEvents.APIGatewayProxyResponse { StatusCode = 400 };
                }
<# } else if (parameter.ParameterType == ParameterType.FromHeader) { #>
<# if (parameter.Type.IsArrayType) { #>
                if (!AmazonLambdaExtension.Helpers.BindHelper.TryBindArray<<#= parameter.Type.ElementType.FullName #>>(request.MultiValueHeaders, "<#= parameter.Key #>", out var p<#= i #>))
                {
                    return new Amazon.Lambda.APIGatewayEvents.APIGatewayProxyResponse { StatusCode = 400 };
                }
<# } else { #>
                if (!AmazonLambdaExtension.Helpers.BindHelper.TryBind<<#= parameter.Type.FullName #>>(request.Headers, "<#= parameter.Key #>", out var p<#= i #>))
                {
                    return new Amazon.Lambda.APIGatewayEvents.APIGatewayProxyResponse { StatusCode = 400 };
                }
<# } #>
<# } else if (parameter.ParameterType == ParameterType.FromService) { #>
                var p<#= i #> = serviceLocator.GetService<<#= parameter.Type.FullName #>()>();
<# } else { #>
<# if (parameter.Type.IsAPIGatewayProxyRequest()) { #>
                var p<#= i #> = request;
<# } else if (parameter.Type.IsLambdaContext()) { #>
                var p<#= i #> = context;
<# } #>
<# } #>

<# } #>
                <#= handler.ResultType != null ? "var output = " : "" #><#= handler.IsAsync ? "await " : "" #>function.<#= handler.MethodName #>(<#= String.Join(", ", handler.Parameters.Select((x, i) => $"p{i}")) #>);
<# if (handler.ResultType?.AllowNull ?? false) { #>
                if (output == null)
                {
                    return new Amazon.Lambda.APIGatewayEvents.APIGatewayProxyResponse { StatusCode = 404 };
                }
<# } #>

                return new Amazon.Lambda.APIGatewayEvents.APIGatewayProxyResponse
                {
<# if (handler.ResultType != null) { #>
                    Body = serializer.Serialize(output),
                    Headers = new Dictionary<string, string> { { "Content-Type", "application/json" } },
<# } #>
                    StatusCode = 200
                };
            }
            catch (AmazonLambdaExtension.ApiException ex)
            {
                return new Amazon.Lambda.APIGatewayEvents.APIGatewayProxyResponse { StatusCode = ex.StatusCode };
            }
            catch (System.Exception ex)
            {
                context.Logger.LogLine(ex.ToString());
                return new Amazon.Lambda.APIGatewayEvents.APIGatewayProxyResponse { StatusCode = 500 };
            }
        }
    }
}
