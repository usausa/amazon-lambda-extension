<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="AmazonLambdaExtension.Helpers" #>
<#@ import namespace="AmazonLambdaExtension.SourceGenerator.Models" #>
<#
    var contextIndex = handler.Parameters.FindIndex(static x => x.Type.IsLambdaContext());
    var arguments = handler.Parameters
        .Select(static (x, i) => new { Parameter = x, Index = i })
        .Where(static x => x.Parameter.ParameterType != ParameterType.FromServices)
        .Select(static x => $"{x.Parameter.Type.FullName} p{x.Index}");
    if (contextIndex < 0)
    {
        arguments = arguments.Append($"Amazon.Lambda.Core.ILambdaContext p{handler.Parameters.Count}");
    }
    var artument = String.Join(", ", arguments);
    var contextArtument = contextIndex < 0 ? $"p{handler.Parameters.Count}" : $"p{contextIndex}";
#>
#pragma warning disable CS8669
namespace <#= handler.Namespace #>
{
    public sealed class <#= handler.WrapperClass #>
    {
<# if (function.ServiceResolver != null) { #>
        private readonly <#= function.ServiceResolver.FullName #> serviceResolver;

<# } #>
<# if (function.Filter != null) { #>
        private readonly <#= function.Filter.Type.FullName #> filter;

<# } #>
        private readonly <#= function.Function.FullName #> function;

        public <#= handler.WrapperClass #>()
        {
<# if (function.ServiceResolver != null) { #>
            serviceResolver = new <#= function.ServiceResolver.FullName #>();
<# } #>
<# if (function.Filter != null) { #>
            filter = new <#= function.Filter.Type.FullName #>();
<# } #>
<# if (function.ResolveFunction) { #>
            function = serviceResolver.GetService<<#= function.Function.FullName #>>();
<# } else { #>
            function = new <#= function.Function.FullName #>(<#= String.Join(",", function.ConstructorParameters.Select(static x => $"serviceResolver.GetService<{x.FullName}>()")) #>);
<# } #>
        }

<# if (handler.IsAsync || function.IsAsyncRequired()) { #>
<# if (handler.ResultType != null) { #>
        public async System.Threading.Tasks.Task<<#= handler.ResultType.FullName #>> Handle(<#= artument #>)
<# } else { #>
        public async System.Threading.Tasks.Task Handle(<#= artument #>)
<# } #>
<# } else { #>
<# if (handler.ResultType != null) { #>
        public <#= handler.ResultType.FullName #> Handle(<#= artument #>)
<# } else { #>
        public void Handle(<#= artument #>)
<# } #>
<# } #>
        {
<# if (function.Filter?.Executing is not null) { #>
            <#= function.Filter.Executing.IsAsync ? "await " : "" #>filter.OnFunctionExecuting(<#= contextArtument #>)<#= function.Filter.Executing.IsAsync ? ".ConfigureAwait(false)" : "" #>;

<# } #>
            try
            {
<# for (var i = 0; i < handler.Parameters.Count; i++) { #>
<# var parameter = handler.Parameters[i]; #>
<# if (parameter.ParameterType == ParameterType.FromServices) { #>
                var p<#= i #> = serviceResolver.GetService<<#= parameter.Type.FullName #>>();

<# } #>
<# } #>
                <#= handler.ResultType != null ? "return " : "" #><#= handler.IsAsync ? "await " : "" #>function.<#= handler.MethodName #>(<#= String.Join(", ", handler.Parameters.Select(static (x, i) => $"p{i}")) #>)<#= handler.IsAsync ? ".ConfigureAwait(false)" : "" #>;
            }
            catch (System.Exception ex)
            {
                <#= contextArtument #>.Logger.LogLine(ex.ToString());
                throw;
            }
<# if (function.Filter?.Executed is not null) { #>
            finally
            {
                <#= function.Filter.Executed.IsAsync ? "await " : "" #>filter.OnFunctionExecuted(<#= contextArtument #>)<#= function.Filter.Executed.IsAsync ? ".ConfigureAwait(false)" : "" #>;
            }
<# } #>
        }
    }
}
